"
I am the root of the github markup tree
"
Class {
	#name : #MicRootBlock,
	#superclass : #MicAbstractBlock,
	#category : #'Microdown-Model'
}

{ #category : #visiting }
MicRootBlock >> accept: aVisitor [
 	^ aVisitor visitRoot: self
]

{ #category : #testing }
MicRootBlock >> addLineAndReturnNextNode: line [
	"add line to this node. 
	Notice, the action is allowed to create new nodes in the block tree.
	Returns the node to handle next line - typically self."

	| newBlock |
	newBlock := self newBlockFor: line parent: self.
	^ newBlock 
]

{ #category : #testing }
MicRootBlock >> canConsumeLine: line [
	"The root block can always consume everything no matter what it is."

	^ true
]

{ #category : #'pillar integration' }
MicRootBlock >> includeFor: aFile [

	| inclusionVisitor |
	inclusionVisitor := MicFileIncluder new.
	inclusionVisitor topFile: aFile file.
	inclusionVisitor visit: self.
	^ self
]

{ #category : #accessing }
MicRootBlock >> indent [
	^0
]

{ #category : #'pillar integration' }
MicRootBlock >> pdfTransformationsFor: aDocument [

	^ #()
]

{ #category : #accessing }
MicRootBlock >> properties: aConfigurationForPillar [
	"Pay attention the strong hypothesis here is that keys of microdown properties and pillar configuration should not overlap. A possible solution would be to have clever at: and at:put: that check for example for a prefix for microdown properties.
	
	This way the user would write
		aMicElement at: #prop
		aMicElement at: #prop put: 123
				
		the system would store: #mic_prop
	
	"

	"to avoid trashing the potential existing properties of a mic element, 
	we copied them into the configuration which is a special kind of dictionary and 
	store the dictionary values in it.
	"
	
	properties keysAndValuesDo: [ :k :v | aConfigurationForPillar at: k put: v ].
	properties := aConfigurationForPillar
]

{ #category : #'pillar integration' }
MicRootBlock >> transformDocumentFor: aPRPDFDocument [ 
	"This is a hook to be able to have framework specific transformation hooks.
	see PRAbstractOutputDocument>>#buildOn:"

	^ aPRPDFDocument transformDocument: (self resolveFrom: aPRPDFDocument project baseDirectory asMicResourceReference )
]
